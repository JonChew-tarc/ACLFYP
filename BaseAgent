import datetime
import getpass
from re import A
import time
import asyncio
import spade
import xml.etree.ElementTree as ET
import itertools as IT
import requests
import aioxmpp
import XMLGenerate
import DroneAgent
import InputAgent
import Task

from lxml import etree
from spade import quit_spade
from spade.agent import Agent
from spade.behaviour import CyclicBehaviour, PeriodicBehaviour, FSMBehaviour, State, OneShotBehaviour
from spade.message import Message
from spade.template import Template

ALTITUDE = 0
LONGITUDE = 0
LATITUDE = 0
incremental = 0


class BaseAgent(Agent):

    def __init__(self, ip, _pass):
        Agent.__init__(self, ip, _pass)
        self.availableA = True
        self.availableB = True
        self.taskStorage = Task.TaskStorage()

    class SubscribePresenceBehav(OneShotBehaviour):
        def on_available(self, jid, stanza):
            print(
                "[{}] Agent {} is available.".format(self.agent.name, str(jid))
            )
            if(str(jid) == "user2@localhost"):
                self.agent.availableA = True
            elif(str(jid) == "user3@localhost"):
                self.agent.availableB = True

        def on_unavailable(self, jid, stanza):
            print(
                "[{}] Agent {} is unavailable.".format(self.agent.name, str(jid))
            )

        def on_subscribed(self,jid):
            print(
                "[{}] Agent {} has accepted the subscription.".format(self.agent.name, jid.split("@")[0])
            )
            print(
                "[{}] Contacts List : {}".format(self.agent.name, self.agent.presence.get_contacts())
            )
        
        def on_subscribe(self, jid):
            print(
                "[{}] Agent {} asked for subscription. Should I approve it?".format(self.agent.name, jid.split("@")[0])
            )
            self.presence.approve(jid)

        
        
        async def run(self):
            self.presence.on_subscribe = self.on_subscribe
            self.presence.on_subscribed = self.on_subscribed
            self.presence.on_available = self.on_available

            self.presence.set_available()
            self.presence.subscribe(self.agent.DroneAgent1)
            self.presence.subscribe(self.agent.DroneAgent2)



    class QueryDroneBehav(PeriodicBehaviour):
        async def run(self):
            global incremental 
            self.sequence = incremental
    
            if (self.agent.availableA):
                self.sequence += 1
                filename = "QueryDrone.XML"

                newTask = Task.Task("T" + str(self.sequence), "Request Data", 
                "Query Data", str(datetime.datetime.now().time()), "user1@localhost", "user2@localhost")
                
                self.agent.taskStorage.addActiveTask(newTask)
                XMLGenerate.GenerateTaskQueryXML(filename, self.sequence, "user1@localhost", "user2@localhost")

                print(f"QuerySenderBehaviour running at {datetime.datetime.now().time()}: {self.counter}")

                generatedQuery = ET.parse('QueryDrone.XML')
                rootGeneratedQuery = generatedQuery.getroot()
                droneDataXML = ET.tostring(rootGeneratedQuery).decode()

                msg = Message(to="user2@localhost")  # Instantiate the message
                msg.set_metadata("performative", "request")
                msg.body = droneDataXML  # Set the message content
            
                await self.send(msg)
                print("Base Message sent to Drone 1!")
                incremental = self.sequence

                if self.counter == 5:
                    self.kill()

                asyncio.sleep(1)
                self.counter += 1
            elif(self.presence.on_unavailable(aioxmpp.JID.fromstr(self.agent.DroneAgent1),aioxmpp.PresenceShow.NONE)):
                print("[{}] currently inactive", format(self.agent.name))
            
            if (self.agent.availableB):
                self.sequence += 1
                filename = "QueryDrone2.XML"

                newTask = Task.Task("T" + str(self.sequence), "Request Data", 
                "Query Data", str(datetime.datetime.now().time()), "user1@localhost", "user3@localhost")
                
                self.agent.taskStorage.addActiveTask(newTask)

                XMLGenerate.GenerateTaskQueryXML(filename, self.sequence, "user1@localhost", "user3@localhost")

                print(f"QuerySenderBehaviour running at {datetime.datetime.now().time()}: {self.counter}")

                generatedQuery = ET.parse('QueryDrone2.XML')
                rootGeneratedQuery = generatedQuery.getroot()
                droneDataXML = ET.tostring(rootGeneratedQuery).decode()

                msg = Message(to="user3@localhost")  # Instantiate the message
                msg.set_metadata("performative", "request")
                msg.body = droneDataXML  # Set the message content
            
                await self.send(msg)
                print("Base Message sent to Drone 2!")

                incremental = self.sequence

                if self.counter == 5:
                    self.kill()

                asyncio.sleep(1)
                self.counter += 0
            elif(self.presence.on_unavailable(aioxmpp.JID.fromstr(self.agent.DroneAgent2),aioxmpp.PresenceShow.NONE)):
                print("currently inactive")

        async def on_end(self):
            # stop agent from behaviour
            await self.agent.stop()

        async def on_start(self):
            self.counter = 0
            self.sequence = 0


# receive input from user
    class ReceiveInputBehav(CyclicBehaviour):
        async def run(self):
            global incremental 
            self.sequence = incremental

            print(f"ReceivedInputBehav running at {datetime.datetime.now().time()}")
            receiveInputMsg = await self.receive(timeout = 1000)

            if receiveInputMsg:
                receivedTree = ET.XML(receiveInputMsg.body)
                with open("UserInputB.XML", "wb") as f:
                    f.write(ET.tostring(receivedTree))
                treeReceivedData = ET.parse('UserInputB.XML')
                rootReceivedData = treeReceivedData.getroot()
                for elem in rootReceivedData.iter('Ontology'):
                    self.ontology = str(elem.text)
                
                for elem in rootReceivedData.iter('DroneName'):
                    self.dronename = str(elem.text)

                for elem in rootReceivedData.iter('InputLatitude'):
                    self.latitude = str(elem.text)
                
                for elem in rootReceivedData.iter('InputLongitude'):
                    self.longitude = str(elem.text)
                
                if (self.ontology == "Input Data"):
                    self.sequence += 1
                    filename = "DroneGoCoordinates.XML"
   
                    XMLGenerate.GenerateTaskGoCoordinatesXML(filename,str(self.sequence),self.latitude,self.longitude,str(self.agent.name),self.dronename)

                    generatedCoordinates = ET.parse(filename)
                    rootGeneratedCoord = generatedCoordinates.getroot()
                    generatedCoordXML = ET.tostring(rootGeneratedCoord).decode()

                    msg = Message(to=self.dronename)  # Instantiate the message
                    msg.set_metadata("performative", "request")
                    msg.body = generatedCoordXML  # Set the message content

                    await self.send(msg)

                    incremental = self.sequence


                    

    class ReceiveDroneDataBehav(CyclicBehaviour):
        async def run(self):
            print(f"ReceivedDroneData running at {datetime.datetime.now().time()}")
            global incremental 
            self.sequence = incremental
            receiveDroneMsg = await self.receive(timeout = 30)

            if receiveDroneMsg:
                if str(receiveDroneMsg.sender) == "user2@localhost":
                    #here print the collected data from drones 
                    receivedTree = ET.XML(receiveDroneMsg.body)
                    with open("Drone2Data.XML", "wb") as f:
                       f.write(ET.tostring(receivedTree))
                    treeReceivedData = ET.parse('Drone2Data.XML')
                    rootReceivedData = treeReceivedData.getroot()
                    
                    for elem in rootReceivedData.iter('Ontology'):
                        self.ontology = str(elem.text)

                    if(self.ontology == "Drone Data"):
                        #compare battery level to return home
                        for elem in rootReceivedData.iter('batteryStatus'):
                            self.droneBatteryLevel = int(elem.text)
                        
                        if(self.droneBatteryLevel < 25):
                            self.sequence += 1
                            XMLGenerate.GenerateTaskReturnXML("OrderReturn.XML", self.sequence, str(self.agent.jid), "user2@localhost")
                            generatedQuery = ET.parse('OrderReturn.XML')
                            rootGeneratedQuery = generatedQuery.getroot()
                            orderReturnXML = ET.tostring(rootGeneratedQuery).decode()

                            msg = Message(to="user2@localhost")  # Instantiate the message
                            msg.set_metadata("performative", "request")
                            msg.body = orderReturnXML  # Set the message content
                            incremental = self.sequence
                        
                    elif(self.ontology == "Return Home"):
                        print("Yes come home child")


                else:
                    print(receiveDroneMsg.sender) 
                
            else:
                print("Base Agent did not get any reply")

    async def on_end(self):
        await self.agent.stop()
    
    async def on_start(self):
        self.sequence = 0
        

    #def getCoordinatesInput():

    #async def 

    
    async def setup(self):
    
        print("Base agent activated")
        b = self.QueryDroneBehav(period = 15)
        self.add_behaviour(b)
        templateA = Template()
        templateA.set_metadata("performative", "inform")
        c = self.ReceiveDroneDataBehav()
        self.add_behaviour(c, templateA)
        a = self.SubscribePresenceBehav()
        self.add_behaviour(a)
        templateB = Template()
        templateB.set_metadata("performative", "request")
        e = self.ReceiveInputBehav()
        self.add_behaviour(e, templateB)
    

        



if __name__ == "__main__":

    droneagentA = DroneAgent.DroneAgent("user2@localhost", "user2")
    droneagentB = DroneAgent.DroneAgent("user3@localhost", "user3")
    baseagent = BaseAgent("user1@localhost", "user1")
    inputAgent = InputAgent.InputAgent("user4@localhost", "user4")

    baseagent.DroneAgent1 = "user2@localhost"
    baseagent.DroneAgent2 = "user3@localhost"
    droneagentA.BaseAgent = "user1@localhost"
    droneagentB.BaseAgent = "user1@localhost"

    future1 = droneagentA.start(auto_register = True)
    future1.result()
    future2 = droneagentB.start(auto_register = True)
    future2.result()
    
    future3 = baseagent.start(auto_register = True)
    future3.result()

    future4 = inputAgent.start(auto_register = True)
    future4.result()



    while droneagentA.is_alive():
        try:
            time.sleep(5)
        except KeyboardInterrupt:
            baseagent.stop()
            droneagentA.stop()
            droneagentB.stop()
            break
    print("Agents finished")
    quit_spade()